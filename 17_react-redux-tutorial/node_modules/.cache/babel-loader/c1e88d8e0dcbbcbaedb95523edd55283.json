{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\";\nconst INSERT = \"todos/INSERT\";\nconst TOGGLE = \"todos/TOGGLE\";\nconst REMOVE = \"todos/REMOVE\";\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 3;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  done: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nconst initialState = {\n  input: \"\",\n  todos: [{\n    id: 1,\n    text: \"리덕스 기초 배우기\",\n    done: true\n  }, {\n    id: 2,\n    text: \"리액트 리덕스 사용하기\",\n    done: false\n  }]\n};\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => ({ ...state,\n    input\n  }),\n  [INSERT]: (state, todo) => ({ ...state,\n    todos: state.todos.concat(todo)\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => ({ ...state,\n    todos: state.todos.map(todo => todo.id === id ? { ...todo,\n      done: !todo.done\n    } : todo)\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => ({ ...state,\n    todos: state.todos.filter(todo => todo.id !== id)\n  })\n}, initialState); // export const changeInput = (input) => ({\n//   type: CHANGE_INPUT,\n//   input,\n// });\n// let id = 3;\n// export const insert = (text) => ({\n//   type: INSERT,\n//   todo: {\n//     id: id++,\n//     text,\n//     done: false,\n//   },\n// });\n// export const toggle = (id) => ({\n//   type: TOGGLE,\n//   id,\n// });\n// export const remove = (id) => ({\n//   type: REMOVE,\n//   id,\n// });\n// function todos(state = initialState, action) {\n//   switch (action.type) {\n//     case CHANGE_INPUT:\n//       return {\n//         ...state,\n//         input: action.input,\n//       };\n//     case INSERT:\n//       return {\n//         ...state,\n//         todos: state.todos.concat(action.todo),\n//       };\n//     case TOGGLE:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo\n//         ),\n//       };\n//     case REMOVE:\n//       return {\n//         ...state,\n//         todos: state.todos.filter((todo) => todo.id !== action.id),\n//       };\n//     default:\n//       return state;\n//   }\n// }\n\nexport default todos;","map":{"version":3,"sources":["C:/Users/bit/Desktop/react/1_react_gil/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","id","insert","text","done","toggle","remove","initialState","todos","state","payload","todo","concat","map","filter"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AAEA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AAEA,OAAO,MAAMC,WAAW,GAAGN,YAAY,CAACE,YAAD,EAAgBK,KAAD,IAAWA,KAA1B,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGT,YAAY,CAACG,MAAD,EAAUO,IAAD,KAAW;AACpDF,EAAAA,EAAE,EAAEA,EAAE,EAD8C;AAEpDE,EAAAA,IAFoD;AAGpDC,EAAAA,IAAI,EAAE;AAH8C,CAAX,CAAT,CAA3B;AAMP,OAAO,MAAMC,MAAM,GAAGZ,YAAY,CAACI,MAAD,EAAUI,EAAD,IAAQA,EAAjB,CAA3B;AACP,OAAO,MAAMK,MAAM,GAAGb,YAAY,CAACK,MAAD,EAAUG,EAAD,IAAQA,EAAjB,CAA3B;AAEP,MAAMM,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,EADY;AAEnBQ,EAAAA,KAAK,EAAE,CACL;AACEP,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,EAML;AACEH,IAAAA,EAAE,EAAE,CADN;AAEEE,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANK;AAFY,CAArB;AAgBA,MAAMI,KAAK,GAAGd,aAAa,CACzB;AACE,GAACC,YAAD,GAAgB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEV;AAAX,GAAR,MAAgC,EAAE,GAAGS,KAAL;AAAYT,IAAAA;AAAZ,GAAhC,CADlB;AAEE,GAACJ,MAAD,GAAU,CAACa,KAAD,EAAQE,IAAR,MAAkB,EAC1B,GAAGF,KADuB;AAE1BD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYI,MAAZ,CAAmBD,IAAnB;AAFmB,GAAlB,CAFZ;AAME,GAACd,MAAD,GAAU,CAACY,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAET;AAAX,GAAR,MAA6B,EACrC,GAAGQ,KADkC;AAErCD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,GAAZ,CAAiBF,IAAD,IACrBA,IAAI,CAACV,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGU,IAAL;AAAWP,MAAAA,IAAI,EAAE,CAACO,IAAI,CAACP;AAAvB,KAAjB,GAAiDO,IAD5C;AAF8B,GAA7B,CANZ;AAYE,GAACb,MAAD,GAAU,CAACW,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAET;AAAX,GAAR,MAA6B,EACrC,GAAGQ,KADkC;AAErCD,IAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYM,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYA,EAAzC;AAF8B,GAA7B;AAZZ,CADyB,EAkBzBM,YAlByB,CAA3B,C,CAqBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\";\nconst INSERT = \"todos/INSERT\";\nconst TOGGLE = \"todos/TOGGLE\";\nconst REMOVE = \"todos/REMOVE\";\n\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 3;\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  done: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\nexport const remove = createAction(REMOVE, (id) => id);\n\nconst initialState = {\n  input: \"\",\n  todos: [\n    {\n      id: 1,\n      text: \"리덕스 기초 배우기\",\n      done: true,\n    },\n    {\n      id: 2,\n      text: \"리액트 리덕스 사용하기\",\n      done: false,\n    },\n  ],\n};\n\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) => ({ ...state, input }),\n    [INSERT]: (state, todo) => ({\n      ...state,\n      todos: state.todos.concat(todo),\n    }),\n    [TOGGLE]: (state, { payload: id }) => ({\n      ...state,\n      todos: state.todos.map((todo) =>\n        todo.id === id ? { ...todo, done: !todo.done } : todo\n      ),\n    }),\n    [REMOVE]: (state, { payload: id }) => ({\n      ...state,\n      todos: state.todos.filter((todo) => todo.id !== id),\n    }),\n  },\n  initialState\n);\n\n// export const changeInput = (input) => ({\n//   type: CHANGE_INPUT,\n//   input,\n// });\n\n// let id = 3;\n// export const insert = (text) => ({\n//   type: INSERT,\n//   todo: {\n//     id: id++,\n//     text,\n//     done: false,\n//   },\n// });\n\n// export const toggle = (id) => ({\n//   type: TOGGLE,\n//   id,\n// });\n\n// export const remove = (id) => ({\n//   type: REMOVE,\n//   id,\n// });\n\n// function todos(state = initialState, action) {\n//   switch (action.type) {\n//     case CHANGE_INPUT:\n//       return {\n//         ...state,\n//         input: action.input,\n//       };\n//     case INSERT:\n//       return {\n//         ...state,\n//         todos: state.todos.concat(action.todo),\n//       };\n//     case TOGGLE:\n//       return {\n//         ...state,\n//         todos: state.todos.map((todo) =>\n//           todo.id === action.id ? { ...todo, done: !todo.done } : todo\n//         ),\n//       };\n//     case REMOVE:\n//       return {\n//         ...state,\n//         todos: state.todos.filter((todo) => todo.id !== action.id),\n//       };\n//     default:\n//       return state;\n//   }\n// }\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}