let koa,Router,bodyParser,mongoose,api;_3d4‍.w("koa",[["default",["koa"],function(v){koa=v}]]);_3d4‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_3d4‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_3d4‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_3d4‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();

 // import ,export >> esm 설치시 가능




// import createFakeData from './createFakeData';

const { PORT, MONGO_URI } = process.env; // ../env 적용
mongoose
  .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
  .then(() => {
    console.log('Connected to MongoDB');
    // createFakeData();
  })
  .catch((e) => {
    _3d4‍.g.console.error(e);
  });

const app = new koa();
const router = new Router();

router.get('/', (ctx) => {
  ctx.body = '홈';
});

router.get('/about/:name', (ctx) => {
  const { name } = ctx.params;
  ctx.body = name ? `${name}의 소개` : '소개';
});

router.get('/posts', (ctx) => {
  const { id } = ctx.query;
  ctx.body = id ? `포스트 #${id}` : '포스트 아이디가 없습니다.';
});

router.use('/api', api.routes());

app.use(bodyParser());
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
  _3d4‍.g.console.log('Listening to port %d', port);
});
